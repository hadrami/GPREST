generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===== Enums (declare before models) =====
 */
enum Role {
  ADMIN
  MANAGER
  SCAN_AGENT
}

enum PersonType {
  STUDENT
  STAFF
}

enum Meal {
  PETIT_DEJEUNER
  DEJEUNER
  DINER
}

/**
 * ===== Core models =====
 */
model Establishment {
  id           String            @id @default(cuid())
  name         String            @unique
  location     String?
  people       Person[]
  users        User[]
  consumptions MealConsumption[] @relation("EstablishmentConsumptions")
  createdAt    DateTime          @default(now())
}

model User {
  id String @id @default(cuid())

  // ðŸ‘‡ NEW
  username String  @unique
  email    String? @unique

  name               String
  passwordHash       String
  role               Role
  establishmentId    String?
  establishment      Establishment? @relation(fields: [establishmentId], references: [id])
  mustChangePassword Boolean        @default(true)
  passwordChangedAt  DateTime?
  createdAt          DateTime       @default(now())

  scans MealConsumption[] @relation("UserScans")
}

model Person {
  id              String        @id @default(cuid())
  matricule       String        @unique
  name            String
  email           String?       @unique
  type            PersonType
  establishmentId String
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  createdAt       DateTime      @default(now())

  plans        MealPlan[]
  consumptions MealConsumption[]

  @@index([establishmentId])
}

model MealPlan {
  id        String   @id @default(cuid())
  personId  String
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  date      DateTime
  meal      Meal
  planned   Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([personId, date, meal], name: "uniq_plan")
  @@index([date, meal])
}

model MealConsumption {
  id         String   @id @default(cuid())
  personId   String
  person     Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  date       DateTime
  meal       Meal
  consumedAt DateTime @default(now())

  scannerUserId String?
  scanner       User?   @relation(name: "UserScans", fields: [scannerUserId], references: [id])

  establishmentId String?
  establishment   Establishment? @relation(name: "EstablishmentConsumptions", fields: [establishmentId], references: [id])

  createdAt DateTime @default(now())

  @@unique([personId, date, meal], name: "uniq_consumption")
  @@index([date, meal])
}

/**
 * ===== Keep any legacy models below to avoid dropping data =====
 */
/**
 * model Student { ... }
 * model Ticket  { ... }
 */
